rules_version = '2';
service cloud.firestore {

  match /databases/{database}/documents {
    function isAuthenticated(){
      return request.auth != null;
    }
    function reqData(){
      return request.resource.data;
    }
    function resData(){
      return resource.data;
    }
    function isNotDeleted(fieldName){
      return fieldName in reqData() && fieldName in resData();
    }
    function updatedKeys(){
      return reqData().diff(resData()).affectedKeys();
    }
    match /users/{documentId} {
      function uidOfDocumentId(){
        return documentId.split('_')[0];
      }
      function isReqOwner(){
        return request.auth.uid == reqData().uid;
      }
      function isResOwner(){
        return !(exists(/databases/$(database)/documents/users/$(documentId)))
          || request.auth.uid == resData().uid;
      }
      function uidIsValid(){
        let uid = reqData().uid;
        return uid is string && uid == uidOfDocumentId();
      }
      function userNameIsValid(){
        let userName = reqData().userName;
        return userName is string && userName.size() <= 15 && userName.size() >= 1;
      }
      function bioIsValid(){
        let bio = reqData().bio;
        return bio is string && bio.size() <= 160 && bio.size() >= 1;
      }
      function isCreateValid(){
        return reqData().keys().hasOnly(['uid','userName','bio'])
          && uidIsValid()
          && userNameIsValid()
          && (!('bio' in reqData()) || bioIsValid());
      }
      function isUpdateValid(){
        return updatedKeys().hasOnly(['userName','bio'])
          && (!('userName' in reqData()) || userNameIsValid())
          && isNotDeleted('userName')
          && (!('bio' in reqData()) || bioIsValid());
      }
      allow get: if true;
      allow list: if isAuthenticated();
      allow create: if isReqOwner() && isCreateValid();
      allow update: if isReqOwner() && isResOwner() && isUpdateValid();
      allow delete: if false;
    }
    match /tweets/{documentId} {
      function isReqOwner(){
        return request.auth.uid == get(reqData().user).data.uid;
      }
      function isResOwner(){
        return !(exists(/databases/$(database)/documents/tweets/$(documentId)))
          || request.auth.uid == get(resData().user).data.uid;
      }
      function userIsValid(){
        let user = reqData().user;
        return user is path && exists(user);
      }
      function tweetTextIsValid(){
        let tweetText = reqData().tweetText;
        return tweetText is string && tweetText.size() <= 280 && tweetText.size() >= 1;
      }
      function dynamicLinkURLIsValid(){
        let dynamicLinkURL = reqData().dynamicLinkURL;
        return dynamicLinkURL is string;
      }
      function isCreateValid(){
        return reqData().keys().hasOnly(['user','tweetText','dynamicLinkURL'])
          && userIsValid()
          && tweetTextIsValid()
          && dynamicLinkURLIsValid();
      }
      function isUpdateValid(){
        return updatedKeys().hasOnly(['tweetText','dynamicLinkURL'])
          && (!('tweetText' in reqData()) || tweetTextIsValid())
          && isNotDeleted('tweetText')
          && (!('dynamicLinkURL' in reqData()) || dynamicLinkURLIsValid())
          && isNotDeleted('dynamicLinkURL');
      }
      allow get: if true;
      allow list: if true;
      allow create: if isReqOwner() && isCreateValid();
      allow update: if isReqOwner() && isResOwner() && isUpdateValid();
      allow delete: if isResOwner();
    }
    match /likes/{documentId} {
      function userOfDocumentId(){
        return documentId.split('_')[0];
      }
      function tweetOfDocumentId(){
        return documentId.split('_')[1];
      }
      function isReqOwner(){
        return request.auth.uid == get(reqData().user).data.uid;
      }
      function isResOwner(){
        return !(exists(/databases/$(database)/documents/likes/$(documentId)))
          || request.auth.uid == get(resData().user).data.uid;
      }
      function likeValueIsValid(){
        let likeValue = reqData().likeValue;
        return likeValue is int && likeValue >= 0 && likeValue <= 5 && likeValue != 0;
      }
      function userIsValid(){
        let user = reqData().user;
        return user is path && exists(user) && get(user).id == userOfDocumentId();
      }
      function tweetIsValid(){
        let tweet = reqData().tweet;
        return tweet is path && exists(tweet) && get(tweet).id == tweetOfDocumentId();
      }
      function isCreateValid(){
        return reqData().keys().hasOnly(['likeValue','user','tweet'])
          && likeValueIsValid()
          && userIsValid()
          && tweetIsValid();
      }
      function isUpdateValid(){
        return updatedKeys().hasOnly(['likeValue'])
          && (!('likeValue' in reqData()) || likeValueIsValid())
          && isNotDeleted('likeValue');
      }
      allow get: if isResOwner();
      allow list: if false;
      allow create: if isReqOwner() && isCreateValid();
      allow update: if isReqOwner() && isResOwner() && isUpdateValid();
      allow delete: if isResOwner();
    }
  }
}